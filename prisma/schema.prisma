// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique
  password     String
  tempPassword String? // 👈 Store plain text password temporarily for email
  role         Role     @default(CUSTOMER)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  vendor        Vendor?
  customer      Customer?
  admin         Admin?
  tickets       Ticket[]             @relation("UserTickets")
  messages      Message[]            @relation("UserMessages")
  apiKeys       ApiKey[]
  auditLogs     AuditLog[]
  passwordReset PasswordResetToken[]
  notification  Notification[]
  reviews       Review[]
  usages        PromotionUsage[]
  pages         Page[]               @relation("UserPages")
  sentMessages  ChatMessage[]        @relation("UserSentMessages")
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}

model Vendor {
  id           Int          @id @default(autoincrement())
  userId       Int          @unique
  businessName String
  gstNumber    String?
  phone        String
  address      String
  city         String?
  state        String?
  zipcode      String?
  website      String?
  contactName  String?
  contactEmail String?
  contactPhone String?
  designation  String?
  status       VendorStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  isActive       Boolean  @default(true)
  deactivatedAt  DateTime? // Nullable timestamp when deactivation started


  categoryId Int?
  zoneId     Int? // Nullable

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category VendorCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  zone     LocationZone?   @relation(name: "ZoneToVendor", fields: [zoneId], references: [id], onDelete: SetNull)

  kycDocuments KYC[]
  products     Product[]
  orders       Order[]
  payouts      Payout[]
  tickets      Ticket[]       @relation("VendorTickets")
  notification Notification[]
  chats        Chat[]
  bankAccount  BankAccount? // One-to-one relation

  // Reverse relation for one-to-one zone control
  zoneOwner LocationZone? @relation(name: "VendorToZone")
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  vendorId      Int      @unique
  accountHolder String
  accountNumber String
  ifscCode      String
  bankName      String
  branchName    String?
  upiId         String? // UPI ID (optional)
  upiQrUrl      String? // URL or path to QR scanner image
  createdAt     DateTime @default(now())
  vendor        Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  name    String
  phone   String
  address String

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders            Order[]
  tickets           Ticket[]
  shippingAddresses ShippingAddress[]
  notification      Notification[]
  chats             Chat[]
}

model Admin {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  name   String

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification[]
}

model KYC {
  id       Int     @id @default(autoincrement())
  vendorId Int
  type     String
  fileUrl  String
  verified Boolean @default(false)

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Product {
  id                   Int           @id @default(autoincrement())
  vendorId             Int
  categoryId           Int?
  name                 String
  description          String        @db.Text
  basePrice            Float         @default(0) // 💰 Price before tax
  taxRate              Float         @default(0) // 🧾 GST rate (e.g., 18 for 18%)
  price                Float         @default(0) // 💸 Calculated: basePrice + (basePrice * taxRate / 100)
  status               ProductStatus @default(PENDING)
  defaultCommissionPct Float? // 🧾 Commission % for platform
  stock                Int           @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now())

  // Relations
  vendor       Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category     ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  compliance   Compliance[]
  orderItems   OrderItem[]
  notification Notification[]
  images       ProductImage[]
  reviews      Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String   @db.Text
  createdAt DateTime @default(now())

  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images  ReviewImage[]
}

model ReviewImage {
  id       Int    @id @default(autoincrement())
  reviewId Int
  url      String

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int              @id @default(autoincrement())
  title     String
  message   String
  read      Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())

  userId     Int?
  vendorId   Int?
  adminId    Int?
  customerId Int?
  orderId    Int?
  productId  Int?

  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  vendor   Vendor?   @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  admin    Admin?    @relation(fields: [adminId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  order    Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  product  Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
}

enum NotificationType {
  ORDER_UPDATE
  PRODUCT_STATUS
  VENDOR_APPROVAL
  VENDOR_REGISTRATION
  ADMIN_ALERT
  GENERAL
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model Compliance {
  id        Int    @id @default(autoincrement())
  productId Int
  type      String
  fileUrl   String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id               Int         @id @default(autoincrement())
  customerId       Int
  vendorId         Int
  shippingSnapshot Json?      // Address, lat/lng, etc.
  status           OrderStatus @default(PENDING)

  // 🟡 New fields for Shiprocket integration
  shiprocketOrderId     Int?       // From response after Shiprocket order creation
  shiprocketShipmentId  Int?       // Specific shipment tracking
  shiprocketLabelUrl    String?    // URL for label download
  shiprocketManifestUrl String?    // Optional manifest if needed

  trackingPartner  String?         // e.g., 'Shiprocket'
  trackingNumber   String?         // Waybill number from Shiprocket

  subTotal       Float  @default(0)
  taxTotal       Float  @default(0)
  shippingCharge Float  @default(0)
  shippingTax    Float? @default(0)
  discount       Float? @default(0)
  total          Float  @default(0)

  createdAt DateTime @default(now())

  // Relations
  customer       Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vendor         Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  items          OrderItem[]
  payment        Payment?
  notification   Notification[]
  trackingEvents OrderTracking[]
  usages         PromotionUsage[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
  CANCELLED
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  basePrice Float @default(0) // per unit price (without tax)
  taxRate   Float @default(0) // copied from Product.taxRate
  taxAmount Float @default(0) // calculated: basePrice * quantity * taxRate / 100
  price     Float @default(0) // total = (basePrice * quantity) + taxAmount

  commissionPct Float? @default(0) // optional: e.g., 10.5 for 10.5%
  commissionAmt Float? @default(0) // calculated: basePrice * quantity * commissionPct / 100

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderTracking {
  id        Int         @id @default(autoincrement())
  orderId   Int
  status    OrderStatus // Your internal status enum
  message   String?     // e.g., "In Transit", "Delivered"
  latitude  Float?      // Optional GPS
  longitude Float?
  createdAt DateTime    @default(now())

  // 🟡 Optional: Store external provider status
  externalStatus  String? // e.g., "Out for Delivery"
  provider        String? // e.g., "Shiprocket"

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique
  amount    Float
  status    PaymentStatus @default(PAID)
  method    String
  createdAt DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PAID
  REFUNDED
  FAILED
}

model Payout {
  id               Int          @id @default(autoincrement())
  vendorId         Int
  amount           Float // Total amount vendor is to be paid (after commission)
  commissionAmount Float // Platform's commission from the total sale
  status           PayoutStatus @default(PENDING)
  requestedAt      DateTime     @default(now())

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
}

model Chat {
  id         Int      @id @default(autoincrement())
  vendorId   Int
  customerId Int
  createdAt  DateTime @default(now())

  vendor   Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  customer Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@unique([vendorId, customerId]) // Prevent duplicate threads
}

model ChatMessage {
  id       Int      @id @default(autoincrement())
  chatId   Int
  senderId Int
  content  String
  sentAt   DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation("UserSentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model Ticket {
  id      Int          @id @default(autoincrement())
  subject String
  message String
  type    TicketType   @default(GENERAL)
  status  TicketStatus @default(OPEN)

  // Linked user types (optional)
  userId     Int?
  vendorId   Int?
  customerId Int?

  // Optional contact info for general users
  name  String? // for general/anonymous submissions
  email String?

  // Optional file upload (image/pdf)
  fileUrl     String? // <--- NEW field added

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?     @relation("UserTickets", fields: [userId], references: [id], onDelete: Cascade)
  vendor   Vendor?   @relation("VendorTickets", fields: [vendorId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  messages Message[] @relation("TicketMessages")
}

enum TicketType {
  GENERAL
  TECHNICAL_ISSUE
  DOCUMENTS
  ACCOUNT_CLEARANCE
  REACTIVATE_ACCOUNT
  REFUND_REQUEST // customer-specific
  ORDER_NOT_RECEIVED // customer-specific
  RETURN_ISSUE // customer-specific
  PAYMENT_ISSUE // vendor/customer
  PRODUCT_LISTING_ISSUE // vendor-specific
  INVENTORY_UPDATE_ISSUE // vendor-specific
  SHIPPING_ISSUE // vendor-specific
  SUPPORT
}

enum TicketStatus {
  OPEN
  RESPONDED
  CLOSED
}

model Message {
  id       Int     @id @default(autoincrement())
  content  String
  isAdmin  Boolean @default(false)
  ticketId Int
  userId   Int?

  ticket    Ticket   @relation("TicketMessages", fields: [ticketId], references: [id], onDelete: Cascade)
  user      User?    @relation("UserMessages", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Report {
  id          Int      @id @default(autoincrement())
  type        String
  data        Json
  generatedAt DateTime @default(now())
}

model Page {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String        @unique
  content     String        @db.LongText // supports large HTML/Markdown content
  status      ContentStatus @default(DRAFT)
  author      User          @relation("UserPages", fields: [authorId], references: [id])
  authorId    Int
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Promotion {
  id        Int             @id @default(autoincrement())
  title     String
  code      String          @unique
  discount  Float
  validFrom DateTime
  validTo   DateTime
  type      PromotionType
  status    PromotionStatus

  usages PromotionUsage[]
}

enum PromotionType {
  COUPON // Promotions applied via a code (can be platform-wide or vendor-specific)
  CATEGORY // Promotions targeting one or more product categories
  PRODUCT // Promotions applied to specific products
  USER_GROUP // Promotions targeted to a group (e.g. new users, VIPs)
  VENDOR // Promotions applicable to all products from a specific vendor
  CART_VALUE // Based on minimum cart value
  FREE_SHIPPING // Offers free shipping under conditions
  BOGO // Buy One Get One or similar bundle-based deals
  SEASONAL // Seasonal or festive promotions
  FLASH_SALE // Time-limited promotional offer
}

enum PromotionStatus {
  ACTIVE
  EXPIRED
}

model PromotionUsage {
  id          Int       @id @default(autoincrement())
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  promotionId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  usedAt      DateTime  @default(now())
  amountSpent Float // Total order amount
  benefit     Float // Discount/benefit received from the promotion
  commission  Float // Commission platform earned from this order
  order       Order?    @relation(fields: [orderId], references: [id])
  orderId     Int?

  @@unique([promotionId, userId]) // Enforces one-time use per user
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  key       String   @unique
  role      Role // ← new field
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rule {
  id        Int        @id @default(autoincrement())
  name      String
  type      RuleType
  value     Float // Assuming % as a float, e.g., 20.0
  status    RuleStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum RuleType {
  TAX
  COMMISSION
}

enum RuleStatus {
  ACTIVE
  INACTIVE
}

model ShippingAddress {
  id          Int      @id @default(autoincrement())
  customerId  Int
  name        String
  phone       String
  addressLine String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model VendorCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  vendors     Vendor[]
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
}

model LocationZone {
  id      Int     @id @default(autoincrement())
  name    String
  country String
  region  String?

  vendorId Int    @unique
  vendor   Vendor @relation(name: "VendorToZone", fields: [vendorId], references: [id], onDelete: Cascade)

  // Optional: list of vendors assigned to this zone
  assignedVendors Vendor[] @relation(name: "ZoneToVendor")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  action     String
  targetType String
  targetId   Int?
  metadata   Json?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}
