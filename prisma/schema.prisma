// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  tempPassword String? // üëà Store plain text password temporarily for email
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor        Vendor?
  customer      Customer?
  admin         Admin?
  tickets       Ticket[]             @relation("UserTickets")
  messages      Message[]            @relation("UserMessages")
  apiKeys       ApiKey[]
  auditLogs     AuditLog[]
  passwordReset PasswordResetToken[]
  notification  Notification[]
  reviews Review[]
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}

model Vendor {
  id           Int          @id @default(autoincrement())
  userId       Int          @unique
  businessName String
  gstNumber    String?
  phone        String
  address      String
  city         String?
  state        String?
  zipcode      String?
  website      String?
  contactName  String?
  contactEmail String?
  contactPhone String?
  designation  String?
  status       VendorStatus @default(PENDING)
  createdAt    DateTime     @default(now())

  categoryId Int?
  zoneId     Int?

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category VendorCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  zone     LocationZone?   @relation(fields: [zoneId], references: [id], onDelete: SetNull)

  kycDocuments KYC[]
  products     Product[]
  orders       Order[]
  payouts      Payout[]
  tickets      Ticket[]       @relation("VendorTickets")
  notification Notification[]
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  name    String
  phone   String
  address String

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders            Order[]
  tickets           Ticket[]
  shippingAddresses ShippingAddress[]
  notification      Notification[]
}

model Admin {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  name   String

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification[]
}

model KYC {
  id       Int     @id @default(autoincrement())
  vendorId Int
  type     String
  fileUrl  String
  verified Boolean @default(false)

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Product {
  id                   Int           @id @default(autoincrement())
  vendorId             Int
  categoryId           Int?
  name                 String
  description          String        @db.Text  // ‚Üê allows longer text
  price                Float
  status               ProductStatus @default(PENDING)
  compliance           Compliance[]
  createdAt            DateTime      @default(now())
  defaultCommissionPct Float? // Optional: default commission set by admin
  // üü¢ Add this line:
  stock                Int           @default(0)

  vendor       Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category     ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orderItems   OrderItem[]
  notification Notification[]
  images       ProductImage[]  
  reviews Review[]
}

model Review {
  id        Int          @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String       @db.Text
  createdAt DateTime     @default(now())

  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  images    ReviewImage[]
}

model ReviewImage {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  url       String

  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}


model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model Notification {
  id        Int              @id @default(autoincrement())
  title     String
  message   String
  read      Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())

  userId     Int?
  vendorId   Int?
  adminId    Int?
  customerId Int?
  orderId    Int?
  productId  Int?

  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  vendor   Vendor?   @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  admin    Admin?    @relation(fields: [adminId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  order    Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  product  Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
}

enum NotificationType {
  ORDER_UPDATE
  PRODUCT_STATUS
  VENDOR_APPROVAL
  VENDOR_REGISTRATION
  ADMIN_ALERT
  GENERAL
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model Compliance {
  id        Int    @id @default(autoincrement())
  productId Int
  type      String
  fileUrl   String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id               Int              @id @default(autoincrement())
  customerId       Int
  vendorId         Int
  shippingSnapshot Json?           // snapshot of shipping address, lat/lng, etc.
  status           OrderStatus     @default(PENDING)
  total            Float
  createdAt        DateTime        @default(now())

  // Relations
  customer         Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vendor           Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  items            OrderItem[]
  payment          Payment?
  notification     Notification[]
  trackingEvents   OrderTracking[]  // ‚¨ÖÔ∏è relation to tracking checkpoints
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
  CANCELLED
}


model OrderItem {
  id              Int     @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  price           Float   // unit price
  commissionPct   Float?  // optional: e.g. 10.5 = 10.5%
  commissionAmt   Float?  // optional: pre-calculated (price * quantity * pct/100)

  // Relations
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderTracking {
  id         Int         @id @default(autoincrement())
  orderId    Int
  status     OrderStatus        // e.g., SHIPPED, DELIVERED, etc.
  message    String?            // optional status message
  latitude   Float?             // GPS: can be null if not needed
  longitude  Float?             // GPS: can be null if not needed
  createdAt  DateTime    @default(now())

  order      Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique
  amount    Float
  status    PaymentStatus @default(PAID)
  method    String
  createdAt DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PAID
  REFUNDED
  FAILED
}

model Payout {
  id               Int          @id @default(autoincrement())
  vendorId         Int
  amount           Float        // Total amount vendor is to be paid (after commission)
  commissionAmount Float        // Platform's commission from the total sale
  status           PayoutStatus @default(PENDING)
  requestedAt      DateTime     @default(now())

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}


enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
}

model Ticket {
  id          Int           @id @default(autoincrement())
  subject     String
  message     String
  type        TicketType    @default(GENERAL)
  status      TicketStatus  @default(OPEN)

  // Linked user types (optional)
  userId      Int?          
  vendorId    Int?
  customerId  Int?

  // Optional contact info for general users
  name        String?       // for general/anonymous submissions
  email       String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User?         @relation("UserTickets", fields: [userId], references: [id], onDelete: Cascade)
  vendor      Vendor?       @relation("VendorTickets", fields: [vendorId], references: [id], onDelete: SetNull)
  customer    Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)

  messages    Message[]     @relation("TicketMessages")
}


enum TicketType {
  GENERAL
  TECHNICAL_ISSUE
  DOCUMENTS
  ACCOUNT_CLEARANCE
  REACTIVATE_ACCOUNT
  REFUND_REQUEST         // customer-specific
  ORDER_NOT_RECEIVED     // customer-specific
  RETURN_ISSUE           // customer-specific
  PAYMENT_ISSUE          // vendor/customer
  PRODUCT_LISTING_ISSUE  // vendor-specific
  INVENTORY_UPDATE_ISSUE // vendor-specific
  SHIPPING_ISSUE         // vendor-specific
  SUPPORT
}


enum TicketStatus {
  OPEN
  RESPONDED
  CLOSED
}

model Message {
  id         Int       @id @default(autoincrement())
  content    String
  isAdmin    Boolean   @default(false)
  ticketId   Int
  userId     Int?

  ticket     Ticket    @relation("TicketMessages", fields: [ticketId], references: [id], onDelete: Cascade)
  user       User?     @relation("UserMessages", fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
}

model Report {
  id          Int      @id @default(autoincrement())
  type        String
  data        Json
  generatedAt DateTime @default(now())
}

model Page {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  content   String
  updatedAt DateTime @updatedAt
}

model Promotion {
  id        Int      @id @default(autoincrement())
  title     String
  code      String   @unique
  discount  Float
  validFrom DateTime
  validTo   DateTime
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  key       String   @unique
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id          Int      @id @default(autoincrement())
  customerId  Int
  name        String
  phone       String
  addressLine String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model VendorCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  vendors     Vendor[]
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
}

model LocationZone {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  country String
  region  String?
  vendors Vendor[]
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  action     String
  targetType String
  targetId   Int?
  metadata   Json?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}
